colm at 202be94
thief at 202d094
AI is 00 00 09 00, looks like

203AA04 + 7B = action taken? bit 0x2 is set when unit has guard mode (AI 4 has 0x20 enabled)
remaining 5 bits of AI3 (bottom 3 are for recovery mode) are stored at 203AA04+7D
+0x74 is next unit?
203AA94 +2 = new x, +3 = new y

39c20 was passed in r0=x [0x13, 0x4]

AI2 table at [5A91D8] = 5A9138
get AI2 counter, multiply by 0x10, add to pointer found in ai2 table
this entry is 0x10 bytes long (duh)
byte 0 is an index to a table at D80FC, which is a table of routines. Takes r0 = character data ptr +0x45
byte 1 is probability this action will be taken
byte 2 is stored at 203AA04+7E, seems to usually be 0xFF
byte 3 seems to be what to set the appropriate AI counter to?
word 4 is character to look for?

AI1 table at [5A91E4] = 5A9184
same deal here

interested in AI1, 0xA (attack only this character)
takes me to 5A8BA0
0th entry has 0th byte = 4, which corresponds to a routine at 3C974

was curious about when 3004E60+0xB is read (usually seems to be set to 0x78)
Well, it seems to be ignored for player units; may be AI related. Got a break at 1A92A, function begins at 1A8E4.
Seems this function iterates through each square beginning with the bottom right, checks if movement cost is higher than 0x78, as usual.
If not higher, compares to this mysterious byte [3004E6B]; else, next tile
if not equal, check movement cost of tile to the left of current tile

For each tile that can be moved to, check tiles in each direction. If their movement cost is negative when cast to a signed byte (which seems to be mean 0xFF, cannot cross), and is NOT outside the map, write the value at 3004E6B there. This marks the boundaries of the moveable range.
Once done, add 1 to this value and store it back.

Sequence of functions at 3D4E2:
1A38C fills in the movement map
1A8E4 marks the boundaries of moveable squares
3DB60 finds target to steal from
But why did we need to mark the boundaries? We already know the unit can't cross that space because the move value was 0xFF before

Well, since we didn't find anyone to steal from, I guess the next thing to do is figure out what to do instead.
Check if 203AA04+0x7B && 0x2 is set; if it is (which it isn't right now), clear the movement map and set move cost of start space to 0
if it is not set, call 1A38C with r0 = current char data ptr (bit being set skips this function call), which fills the movement map.
This must mean that bit 0x2 = don't move
check if unit is magical; if yes, fill in the magic seal range, I guess (call 1B950)
Clear range map
check if current unit has item (hardcoded check for 0xA6, which is Nightmare, I think, at 3D578; if true, skip filling in the range map for each unit)
for each unit, if condition_word && 0x10025 == 0, call function that was passed into the beginning of this function. In our case, it happens to be 3C819. This checks the allegiance bytes and returns 1 if they're not on the same side.
If true, check if the target is within range of weapon


This whole function begins at 3D450, I guess this is the master "offense" AI thing.
Passed in a function in r0 (3C819, this time)
Store this function at sp+0x24
Store 0 at sp+0x20 and strb 0 at sp+0x1A
mov sp+18 to r10
Looks like if unit is in ballista, that gets checked first
If no ballista, check if they can steal
If no steal, then attack?
sp+0x28 looks like attacker's current inventory slot
If no attack, check if there's a ballista to climb into?

Set break on write to thief's x coordinate
203AA94+2 = x, +3 = y

3BA08 takes r0=x, r1=y, r2=?, r3=?, sp=?
I think x and y are target coordinates, and this function figures out the best way to get to that square?
Called at 3CE4C
I think 3A924 calculates the coordinates and writes them to a stack pointer that's passed in
This function begins at 3CE18, and is passed in what appears to be address of the AI2 counter (202D0D9, atm) (but can probably take other AI counter values
call 3A924 with r0=a function (3C819, atm) and r1=stack pointer to write coordinates to
3A924:
sp+00 func passed in (3C819)
sp+04 stack pointer that was passed in
sp+08 initialized to 0xFF
sp+0C initialized to 0xFFFF
sp+10 initialized to 0
current unit x in r4, y in r5
call 18D4C (get movement cost entry)
call 1A43C (fills in RANGE map with move = 0x7C and deployment id = 0, which results in a map of all squares that can reached, or at least, most of them)
Iterate through reachable squares, check if there's a unit that isn't the current unit. If there is, call the function that was passed in (3C819) with r0 = that unit's char data ptr
3C819, as mentioned earlier, checks if the unit is attackable
if unit is attackable, check movement cost for said unit and make sure it's below the number on sp+08 (which, as of now, is still 0xFF)
if it is, write that movement cost in sp+0x8, x at sp+0C, y at sp+10
So basically, this function finds the closest target in range and writes the coordinates to the provided sp


203AA04 = gAiData
+86, 0x3 is stored here if the target unit is being rescued, 0x1 is target unit was not found (maybe a bitfield?)
30017C8 has 1 if action has been decided, 0 if not. Default is set to 1, unsuccessful actions and responsible for setting it back to 0
30017CC is called gBoolIsAI2, so I guess that's set if AI2 is executed?
30017D0 is gpAiScriptCurrent and contains a pointer to the entry that will be attempted
+79, 0x4 is stored if the action tried is unsuccessful

Let's look a bit further into each thing.
AI1 = 0 points to 5A8870; 05 64 FF 00 (rest is 00)
05 = 3CA0D (this is the first turn), which calls AiTryDoStaff and AiTryDoOffensiveAction if staff doesn't work
Next entry is 03 00 FF 00, which...sets the counter back to 0? ok then-

Staff AI:
D868C is gStaffAiPerformTable, containing 8-byte entries with word 1 = staff id, word 2 = pointer, which is called at 3FA9A with r0=item slot id and r1=a routine that was passed in
Heal/Mend/Recover have 3FBB9; calls GetAiSafestAccessibleAdjacentPosition at 3FCA6
Physic has 3Fd31, calls GetUnitMagBy2Range at 3FDF6, and that's added to the unit's mov and stored on sp. Healer x and y in r0 and r1, target x and y in r2 and r3, and calls 3BFD0.
Idea: check if range = 1; if yes, call the former, if not, call the latter.


Unit moving order
gProc_CpPhase = 5A7F08
First function is CpPhase_Init, 396AC
203AA04+7B initialized to 0x1, +0x78 initialized to 0x0, +0x7E initialized to 0xFF, +0x86 to +0x8D initialized to 0x0
word at D8538+chapter_id*4 stored at +0x80; no idea what this is
0x0 stored at +0x84
0x0 stored at +0x85
I guess I actually want gProc_CpOrder, which is 5A7F5C
3 39789
0x78 seems to be an index for 5A7F94, aka CpOrderCallTable
0x74 is pointer to where we are in the AI queue; initialized to 203aa04

AI priority
Start with movement
if unit has dance/play abilities, subtract 0x95 and return
if bit 1 in byte 0xA is set, return
add leader char id<<0x8
if unit can steal, add 0x3C and return
if unit is its own leader, add 0x57 and return
if unit has 0x2000 set in class abilities, add 0x57 and return
if unit can wield weapon, and the weapon is a staff staff, add 0x48 and return (not sure why this is, since there's no wieldable staves)
r7: +1 for each weapon with >1 range
r8: +1 for each 1 range weapon
if r7 >0, add 0x28 and return (if unit has at least 1 >1 range weapon)
if r7 = 0 and r8 = 0, add 0x57 and return (no wieldable weapons)
if only 1-range weapons, add 0x14 and return
store priority as word at 2020188, store deployment id at 203AA04

3D8D4: r0=char data, r1=mov, r2=items id. Fills in movement/range maps. Perfect aside from only using 1 item.
1A3CC: r0=char data, r1=mov. Only fills in movement map, but that'd be a start.

Goal Window:
Money on top row
Time on second row
Incoming! Last Wave! - glowy green
1/3 wave

Tier 1: Iron Sword, Iron Lance, Iron Axe, Iron Bow, Fire, Lightning, Flux, Physic, Relocate (item)
Tier 2: Steel Sword, Steel Lance, Steel Axe, Steel Bow, Elfire, Shine, Worm, Restore, Barrier, Master Seal
Tier 3: Lancereaver, Axereaver, Swordreaver, Longbow, Resire, Thunder, Luna, Fortify, Silence
Tier 4: Brave Sword, Brave Lance, Brave Axe, Brave Bow, Bolting, Purge, Eclipse, Slow (staff), Dancer rings?
Tier 5: Silver Sword, Silver Lance, Silver Axe, Silver Bow, Fimbulvetr, Aura, Fenrir, Sleep

Changes:
Luna can't crit
Eclipse does 1/4th damage to enemies with boss icon
Thunder is 2-3 range
Resire is Nosferatu, but light magic
Worm poisons

Not sold (only obtained via drops/capture)
1-2 range physical (javelin, hand axe, magic swords, etc)
poison weapons
killer weapons
S-rank stuff
Effective weapons (not that there's much of those, since armors/swords are the only weaknesses remaining from the original, so I should either make new ones or scrap them entirely)
Stat boosters and other useful items (Hoplon Guard, etc)


Target name is Syting, class is Duke
mooks are called Bad Guy, boss is Boss, assassins are Assassin (duh)

TODO LIST (updated):
ASM:
DONE - add Zane's MMB
DONE - add Tera's range fix (Restore needs to be mag/2)
DONE - add Freeze status and freeze as sleep hack
DONE - weapons can inflict statuses (otataral bow, maybe blizzard)
DONE - increase exp granted from battle (come up with a formula) (~5 chips/2 KOs for a levelup)
DONE - arms scroll?
DONE - add indicator for assassin units
DONE - edit dancer ring effects (+10 atk is OP, +10 avoid is basically worthless) (either buff effects and they last one turn, or nerf them a bit and have them last longer/decrease each turn)
DONE - Staff accuracy: switch mag and skl getter calls around
DONE - edit skill getter and setter to use deployment ID for the learnable skills rather than character ID
DONE - sell items that grant skills when held? Maybe a secret shop? would sell proc skills that aren't anyone's personal (adept, astra, pavise, etc) - make them have charges, uses 1/battle regardless whether skill happened or not
DONE - Staff exp isn't based on worth
DONE - weapons with 255 crit can't crit (Luna)

Graphics:
Import FE7 mugs for the FE7 characters (do this last)
Import Halberdier animation
Duke animation

Text:
Names/descriptions for buyable units
"Story"
Names and descriptions for dancer rings
Guide (make this after playtesting)
Unlocking the various shops/Capture

Tables:
Set personal growth and bases modifiers (UGHHHHH)
set personal skills
set promotions
buff class bases and growths (because holy crap they're bad)
Set buyable units and their prices
buff weapon exp across the board, make irons and basic tomes/physic infinite use, edit item prices

Events:
Set up map changes on specific turns
Set up waves

Playtesting:
I don't want to talk about it.


Chip: 21 + Enemy_level - Attacker_Level (promoted adds +20)
Kill: Chip + 20 + boss/assassin bonus (+40) + thief bonus (+20)