#include "Extensions/Hack Installation.txt"
#include "Extensions/6CDefinitions.txt"

#include "Movement Arrow EA.txt"
#include "FE8-Buy Units/FE8-Buy Unit EA.txt"

PUSH

//Set guard tile ai after moving and don't set bit 2 of status word if wagon
ORG $18750
callHack_r3(End_Unit_Action)

//When player phase ends and the 'has moved' bits are being unset, write guard tile ai
ORG $1882C
callHack_r0(End_Phase_Set_Guard)

//Everyone can access Supply (except phantoms)
ORG $23F64
#incbin "Supply_Usability.dmp"

//Make sure class+char bases are >=0
ORG $17E64
callHack_r3(No_Negative_Stats)

//Make NPC phase not appear (set eligible unit count to 0, basically)
ORG $24CEC
jumpToHack(No_Eligible_NPCs)

//Really friggin' tired of no$ crashing when trying to decompress bad data, so here's a fix
ORG $12F50
jumpToHack(Decompress_Fix)

//Make Dance multi-target
ORG $23238 //without rings
callHack_r3(Dance1)
ORG $24AFC //with rings
callHack_r3(Dance1)
SHORT 0
ORG $32358 //action
jumpToHack(Dance_Action)
//Dancers can't dance other dancers
ORG $25B40
callHack_r3(Dancer_Check)
SHORT 0x2800

//Make dancer rings refresh
ORG $2FC20
callHack_r3(Dancer_Rings)

//AI
ORG $5A8BA4
SHORT SittingDuck
ORG $D810C
POIN New_AI|1

//Relocate item
ORG ItemUsabilityTable + 4*(Relocate - 0x4B)
POIN Relocate_Usability
ORG ItemEffectTable + 4*(Relocate - 0x4B)
POIN Relocate_Effect

//Clear character data when units die (even players)
ORG $183FC
jumpToHack(Clear_Units_Upon_Death)

//Summon rework
ORG $243D8
jumpToHack(Summon_Usability)
//Check for tiles to summon on uses the phantom's move cost, rather than the summoner's
ORG $25C9C
POIN PhantomMoveCost
ORG $25C66
SHORT 0
ORG $25C74
SHORT 0x5640 0x2800 0xDB07 0x46C0 0x46C0 //ldsb r0,[r0,r1]; cmp r0,#0; blt SkipTargetWrite; nop; nop
//make unit
ORG $7AD1C
jumpToHack(Create_Phantom)

//Goal window
ORG $8D288
#incbin "Goal_Window.dmp"
POIN Enemy_Pointer_Table

//Make sold items sell for 25%
ORG $B5274
SHORT 0x0C40

POP

ALIGN 4
End_Unit_Action:
#incbin "End_Unit_Action.dmp"

ALIGN 4
End_Phase_Set_Guard:
#incbin "End_Phase_Set_Guard.dmp"

ALIGN 4
No_Negative_Stats:
#incbin "No_Negative_Stats.dmp"

ALIGN 4
No_Eligible_NPCs:
#incbin "No_Eligible_NPCs.dmp"

ALIGN 4
Decompress_Fix:
#incbin "Decompress_Fix.dmp"

ALIGN 4
Get_Enemies:
#incbin "Get_Enemies.dmp"
POIN Enemy_Pointer_Table

ALIGN 4
New_AI:
#incbin "New_AI.dmp"
POIN Can_Unit_Steal

ALIGN 4
Dance1:
#incbin "Dance1.dmp"

ALIGN 4
Dance_Action:
#incbin "Dance_Action.dmp"

ALIGN 4
Dancer_Rings:
#incbin "Dancer_Rings.dmp"

ALIGN 4
Dancer_Check:
#incbin "Dancer_Check.dmp"

ALIGN 4
Relocate_Usability:
#incbin "Relocate_Usability.dmp"

ALIGN 4
Relocate_Effect:
#incbin "Relocate_Effect.dmp"

ALIGN 4
Summon_Usability:
#incbin "Summon_Usability.dmp"
POIN SkillTester
WORD SummonID
POIN PhantomCharIDList

PhantomCharIDList:
BYTE PhantomChar1 PhantomChar2 PhantomChar3 PhantomChar4 PhantomChar5
BYTE 0 //terminator

ALIGN 4
Create_Phantom:
#incbin "Create_Phantom.dmp"
POIN PhantomCharIDList PhantomItemPointer Choose_Item_From_List

//PhantomItemPointer defined in here
#include "_Phantom_Items.txt"

ALIGN 4
Clear_Units_Upon_Death:
#incbin "Clear_Units_Upon_Death.dmp"
POIN Get_Enemy_Worth

ALIGN 4
Give_Money_Every_Wave_ASMC:
#incbin "Give_Money_Every_Wave_ASMC.dmp"
WORD Gold_Per_Level